var tipuesearch = {"pages": [{'title': 'About', 'text': '網頁: \xa0 https://yuhao-08.github.io/wcm2024/ \n 網誌:  https://yuhao-08.github.io/wcm2024/blog \n 簡報:  https://yuhao-08.github.io/wcm2024/reveal \n 倉儲:\xa0 https://github.com/yuhao-08/wcm2024 \n', 'tags': '', 'url': 'About.html'}, {'title': 'w3', 'text': '\xa0① 利用github classroom來分組 \n \xa0②  git 的用法 \n \xa0③\xa0 利用Codespaces維護分組 網站及網頁 \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '\xa0① 複習w3的內容 \n \xa0②需下載 main2.txt \n \xa0 \xa0 \xa0 \xa0 \xa0和 static.txt \n \xa0 在倉儲中建立兩個檔案 \n \xa0③ 只要在 Shell 執行 \n \xa0 \xa0\xa0 python3 main2.py---執行靜態 \n \xa0 \xa0 python3 main.py\xa0 ---執行動態 \n \xa0 \xa0\xa0 ctrl + c, c 代表 cancle 也就是取消 \n \xa0④replit分組倉儲權限 必須自行在 /home/runner/.ssh  \n \xa0 \xa0 目錄下建立 id_rsa 與 config  (id_rsa.pub 必須登錄到\xa0 Github 對應帳號),  \n \xa0 \xa0 其中的 config 內容為: \n \n \n \n \n 1 \n 2 \n 3 \n \n \n \n Host github.com \n User git \n Hostname github.com \n \n \n \n \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w5', 'text': '1.複習w3的 分組倉儲權限設定影片 \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': 'A. git 的發展歷史 \n \n \n 2005 年 ：Git 誕生。 Linus Torvalds 建立Git，並在Linux 核心開發中開始使用它。 \n \n \n 2005 年 ：首個公開發布。 \n \n \n 2006 年 ：引進GitHub。 廣泛的使用情境。 \n \n \n 2007 年 ：Git 1.5 發布。這個版本引入了一些重要的特性，包括 git-config 等指令，以及 git-svn 工具。 \n \n \n 2008 年 ：Git 1.6 發布。此版本引入了 git-clone 命令的改進，以及 git-rerere 工具用於解決衝突。 \n \n \n 2009 年 ：Git 1.6.3 發布。這個版本引入了 git bisect 指令，用於二分查找引入Bug 的提交。 \n \n \n 2012 年 ：Git 1.8 發布。這個版本引入了 git-merge 和 git-push 的改進，以及對子模組的改進。 \n \n \n 2014 年 ：Git 2.0 發布。這個版本引入了一些重大變化，包括預設使用push.default = simple 和預設情況下移除git submodule 中的.gitmodule 檔案。 \n \n \n 2016 年 ：Git 2.10 發布。這個版本引入了多種新特性，包括改進的 git rebase ，新的 git worktree 命令等。 \n \n \n 2018 年 ：Git 2.19 發布。這個版本引入了 git switch 和 git restore 命令，用於替代 git checkout 。 \n \n \n 2020 年 ：Git 2.29 發布。這個版本引入了 git sparse-checkout 命令，允許使用者只檢出倉庫的一部分文件。 \n \n \n 2022 年 ：仍在進行中 \n \n \n B. 創作人的相關履歷 \n 1.Git 的創辦人是Linus Torvalds，他是一位著名的電腦程式設計師，同時也是Linux 核心的創作者 \n 2. 經歷： \n Linux 核心開發者 （1991年至今） \n \xa0⓵創建並領導Linux 核心項目，負責開發和維護Linux 核心。 \n \xa0②吸引了全球數千名開發者的參與，使Linux 成為最受歡迎的開源作業系統之一。 \n \xa0③建立Git 分散式版本控制系統，並在Linux 核心開發中開始使用它。 \n \xa0④為了解決Linux 核心開發過程中遇到的問題，例如處理大規模程式碼庫和多人協作等，而設計了Git。 \n C.\xa0git 解決內容管理問題 \n 1.對於一般的專業人士，無論是軟體開發者、寫作者、設計師或其他領域的從業者，Git 都可以作為一個強大的工具來解決內容管理問題 \n \xa0① 版本控制 : 使用Git 可以輕鬆追蹤檔案的變更歷史，從而方便回溯到先前的版本。 \n \xa0② 協作合作 : 多人協作時，Git 提供了分支和合併的功能，可以讓團隊成員在不干擾彼此的情況下並行工作。 \n \xa0③ 備份與同步 : 使用Git 可以輕鬆地將檔案備份到遠端倉庫，並確保資料的安全性和可靠性。 \n \xa0④ 程式碼審查與回饋 : Git 提供了程式碼審查工具，團隊成員可以透過提交程式碼並要求審查來進行程式碼品質控制 \n \xa0⑤專案管理 : Git 倉庫可以與專案管理工具（如Jira、Trello等）集成，幫助團隊追蹤任務、問題和進度，提高專案管 理的效率和透明度。 \n', 'tags': '', 'url': 'w6.html'}, {'title': '期中整理', 'text': '', 'tags': '', 'url': '期中整理.html'}, {'title': '大綱', 'text': '1.網際內容管理課程的英文名稱為 Web-based Content Management \n 2.網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版。 \n', 'tags': '', 'url': '大綱.html'}, {'title': '網頁上的 IDE', 'text': '1. 網頁上的 IDE（集成開發環境）是一種在網頁瀏覽器中運行的開發工具，通常用於網頁開發或輕量級的程式開發。這些工具提供了一個集成的開發環境，包括編輯器、語法高亮顯示、自動完成、調試器和版本控制等功能。 \n 2. Replit、Codespaces 和 Gitpod 都是強大的在線開發環境，可以用來開發各種類型的程式，包括但不限於網頁、應用軟件、遊戲、數據科學和機器學習等。 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': '網頁上的 IDE.html'}, {'title': 'cmsimde', 'text': "SMap  - SiteMap - 依照階次列出網站的所有頁面. \n EditA  - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本. \n Edit  - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式. \n Config  - Configure Site - 編輯頁面標題與管理者密碼. \n Search  - 動態頁面內容的關鍵字搜尋. \n IUpload  - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小. \n IList  - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案. \n FUpload  - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改. \n FList  - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案. \n Logout  - 登出頁面編輯模式. \n Convert  - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁. \n acp  - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲. \n SStatic  - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容. \n RStatic  - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站. \n 80  - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80. \n \n", 'tags': '', 'url': 'cmsimde.html'}, {'title': 'Codespaces', 'text': 'https://yuhao-08.github.io/wcm2024 \n', 'tags': '', 'url': 'Codespaces.html'}, {'title': 'Replit', 'text': 'https://replit.com \n 利用 init_replit 指令安裝所需 Python 模組 chmod u+x init_replit ./init_replit \n On Replit: \n .replit: python3 main.py \n chmod u+x cms init_replit \n ./init_replit \n for cmsimde_site (not needed): git submodule update --init --recursive \n for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent \n password generator:\xa0 https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py \xa0 \n \n for IPv6 only Ubuntu: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.com ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p for Replit: .ssh 目錄中的 config, 將 SSH session 名稱設為 github.com: Host github.com User git Hostname github.co #since Replit works for IPv4, therefore no ProxyCommand setting needed #ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p \n \n \n', 'tags': '', 'url': 'Replit.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};