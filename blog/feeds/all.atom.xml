<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>網際內容管理系統</title><link href="./" rel="alternate"></link><link href="./feeds/all.atom.xml" rel="self"></link><id>./</id><updated>2024-06-15T07:29:53+08:00</updated><entry><title>2024 Spring 課程</title><link href="./2024-Spring-w1-blog-tutorial.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-14T14:47:30+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./2024-Spring-w1-blog-tutorial.html</id><summary type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;2024 Spring 網際內容管理與協同產品設計實習課程教學導引.&lt;/p&gt;


&lt;h1&gt;內容管理系統1&lt;/h1&gt;
&lt;p&gt;使用者可以自行利用 &lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; 倉儲作為 Template, 建立自己的網站內容管理系統.&lt;/p&gt;
&lt;p&gt;引用網站網址連結的方法:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 在文章中多次引用同一個網站連結時, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;https://github.com/mdecycu/cmsimde_site&lt;/a&gt; - 假如想要快速將網址套用 html 網站連結, 可以使用此種方法.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/mdecycu/cmsimde_site"&gt;cmsimde_site&lt;/a&gt; - 也可以使用 Markdown 的標準網站連結使用格式.&lt;/p&gt;
&lt;pre class="brush: python"&gt;
# 引用 Python 程式的方法
for i in range(10):
    print(i, "列出字串")
&lt;/pre&gt;

&lt;p&gt;也可以直接在 .md 檔案中使用 html 標註, 或加入 Javascript 或 Brython 程式碼.&lt;/p&gt;
&lt;p&gt;從 1 累加到 100:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;將 iterable 與 iterator &lt;a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438"&gt;相關說明&lt;/a&gt;, 利用 Brython 與 Ace Editor 整理在這個頁面.&lt;/p&gt;
&lt;!-- 導入 brython 程式庫 --&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/brython.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/brython_stdlib.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;p&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/FileSaver.min.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/filereader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="./../cmsimde/static/ace/ace.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/ext-language_tools.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/mode-python3.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/ace/snippets/python.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt;
&lt;script src="./../cmsimde/static/Cango-24v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/gearUtils-09.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/sylvester.js"&gt;&lt;/script&gt;
&lt;script src="./../cmsimde/static/PrairieDraw.js"&gt;&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/javascript"&gt;
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt;
&lt;!-- editor1 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div1"&gt;&lt;/div&gt;
&lt;!-- editor1 結束 --&gt;
&lt;hr/&gt;&lt;!-- ########################################## --&gt;&lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt;
&lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
&lt;/script&gt;
&lt;/p&gt;
&lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt;
&lt;!-- editor2 開始 --&gt;
&lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt;
&lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt;
&lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"/&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/&gt;&lt;/form&gt;
&lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt;
&lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt;
&lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt;
&lt;div id="brython_div2"&gt;&lt;/div&gt;
&lt;!-- editor2 結束 --&gt;
&lt;hr/&gt;&lt;p&gt;
&lt;script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"&gt;&lt;/script&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>w13課程整理</title><link href="./w13%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:19:41+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w13課程整理.html</id><summary type="html">&lt;h2&gt;w13&lt;/h2&gt;
&lt;p&gt;1.guess_game.7z 是在 AI 輔助下, 將簡單的單人 Brython 線上猜數字遊戲 轉化為可以多人同場比賽猜數字的線上遊戲.&lt;/p&gt;
&lt;p&gt;2.由於使用 Flask, 直 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;w13&lt;/h2&gt;
&lt;p&gt;1.guess_game.7z 是在 AI 輔助下, 將簡單的單人 Brython 線上猜數字遊戲 轉化為可以多人同場比賽猜數字的線上遊戲.&lt;/p&gt;
&lt;p&gt;2.由於使用 Flask, 直接啟動模式僅用於程式開發, 若要部署在 Windows 或 Linux 電腦上, 還需進行下列考量&lt;/p&gt;</content><category term="w13"></category><category term="網誌編寫"></category></entry><entry><title>w1課程整理</title><link href="./w1%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:10:10+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w1課程整理.html</id><summary type="html">&lt;h2&gt;w1&lt;/h2&gt;
&lt;p&gt;1.網際內容管理課程學員上課時必須登入Teams 中上課, 一邊觀看教學示範, 一邊自行操作.&lt;/p&gt;
&lt;p&gt;2.網際內容管理課程的 MS 團隊 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;w1&lt;/h2&gt;
&lt;p&gt;1.網際內容管理課程學員上課時必須登入Teams 中上課, 一邊觀看教學示範, 一邊自行操作.&lt;/p&gt;
&lt;p&gt;2.網際內容管理課程的 MS 團隊代碼: ry8vdyo&lt;/p&gt;
&lt;p&gt;3.登入 Github -連接至 https://github.com/mdecycu/cmsimde_site-建立個人的 wcm2024 倉儲。&lt;/p&gt;</content><category term="w1"></category><category term="網誌編寫"></category></entry><entry><title>w2課程整理</title><link href="./w2%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:10:41+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w2課程整理.html</id><content type="html">&lt;h2&gt;w2&lt;/h2&gt;
&lt;p&gt;1.主要是利用Codespaces維護網站，每天平均僅能使用兩個小時。&lt;/p&gt;
&lt;p&gt;2.採用 Github Codespaces 維護網站的好處是介面提供多終端機與多 ports 開啟功能。&lt;/p&gt;</content><category term="w2"></category><category term="網誌編寫"></category></entry><entry><title>w3課程整理</title><link href="./w3%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:11:06+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w3課程整理.html</id><content type="html">&lt;h2&gt;w3&lt;/h2&gt;
&lt;p&gt;① 利用github classroom來分組&lt;/p&gt;
&lt;p&gt;② git 的用法&lt;/p&gt;
&lt;p&gt;③ 利用Codespaces維護分組網站及網頁&lt;/p&gt;</content><category term="w3"></category><category term="網誌編寫"></category></entry><entry><title>w4課程整理</title><link href="./w4%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:12:41+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w4課程整理.html</id><summary type="html">&lt;h2&gt;w4&lt;/h2&gt;
&lt;p&gt;①複習w3的內容&lt;/p&gt;
&lt;p&gt;②需下載main2.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;     和static.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在倉儲中建立兩個檔案&lt;/p&gt;
&lt;p&gt;③只要在 Shell 執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 main2.py---執行靜態

python3 main.py  ---執行動態

ctrl + c, c 代表 cancle 也就是取消
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;④replit分組倉儲權限必須自行在 /home/runner/.ssh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;目錄下建 …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;w4&lt;/h2&gt;
&lt;p&gt;①複習w3的內容&lt;/p&gt;
&lt;p&gt;②需下載main2.txt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;     和static.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在倉儲中建立兩個檔案&lt;/p&gt;
&lt;p&gt;③只要在 Shell 執行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 main2.py---執行靜態

python3 main.py  ---執行動態

ctrl + c, c 代表 cancle 也就是取消
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;④replit分組倉儲權限必須自行在 /home/runner/.ssh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;目錄下建立 id_rsa 與 config (id_rsa.pub 必須登錄到  Github 對應帳號),

其中的 config 內容為:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;1
2
3
Host github.com
User git
Hostname github.com&lt;/p&gt;</content><category term="w4"></category><category term="網誌編寫"></category></entry><entry><title>w5課程整理</title><link href="./w5%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:13:49+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w5課程整理.html</id><content type="html">&lt;h2&gt;w5&lt;/h2&gt;
&lt;p&gt;1.複習w3的分組倉儲權限設定影片&lt;/p&gt;</content><category term="w5"></category><category term="網誌編寫"></category></entry><entry><title>w6課程整理</title><link href="./w6%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:16:19+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./w6課程整理.html</id><summary type="html">&lt;h2&gt;A. git 的發展歷史&lt;/h2&gt;
&lt;p&gt;2005 年：Git 誕生。 Linus Torvalds 建立Git，並在Linux 核心開發中開始使用它。&lt;/p&gt;
&lt;p&gt;2005 年：首個公開發布。&lt;/p&gt;
&lt;p&gt;2006 年：引進GitHub。 廣泛的使用情境 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;A. git 的發展歷史&lt;/h2&gt;
&lt;p&gt;2005 年：Git 誕生。 Linus Torvalds 建立Git，並在Linux 核心開發中開始使用它。&lt;/p&gt;
&lt;p&gt;2005 年：首個公開發布。&lt;/p&gt;
&lt;p&gt;2006 年：引進GitHub。 廣泛的使用情境。&lt;/p&gt;
&lt;p&gt;2007 年：Git 1.5 發布。這個版本引入了一些重要的特性，包括git-config等指令，以及git-svn工具。&lt;/p&gt;
&lt;p&gt;2008 年：Git 1.6 發布。此版本引入了git-clone命令的改進，以及git-rerere工具用於解決衝突。&lt;/p&gt;
&lt;p&gt;2009 年：Git 1.6.3 發布。這個版本引入了git bisect指令，用於二分查找引入Bug 的提交。&lt;/p&gt;
&lt;p&gt;2012 年：Git 1.8 發布。這個版本引入了git-merge和git-push的改進，以及對子模組的改進。&lt;/p&gt;
&lt;p&gt;2014 年：Git 2.0 發布。這個版本引入了一些重大變化，包括預設使用push.default = simple 和預設情況下移除git submodule 中的.gitmodule 檔案。&lt;/p&gt;
&lt;p&gt;2016 年：Git 2.10 發布。這個版本引入了多種新特性，包括改進的git rebase，新的git worktree命令等。&lt;/p&gt;
&lt;p&gt;2018 年：Git 2.19 發布。這個版本引入了git switch和git restore命令，用於替代git checkout。&lt;/p&gt;
&lt;p&gt;2020 年：Git 2.29 發布。這個版本引入了git sparse-checkout命令，允許使用者只檢出倉庫的一部分文件。&lt;/p&gt;
&lt;p&gt;2022 年：仍在進行中&lt;/p&gt;
&lt;h2&gt;B.創作人的相關履歷&lt;/h2&gt;
&lt;p&gt;1.Git 的創辦人是Linus Torvalds，他是一位著名的電腦程式設計師，同時也是Linux 核心的創作者&lt;/p&gt;
&lt;p&gt;2.經歷：&lt;/p&gt;
&lt;p&gt;Linux 核心開發者（1991年至今）&lt;/p&gt;
&lt;p&gt;⓵創建並領導Linux 核心項目，負責開發和維護Linux 核心。&lt;/p&gt;
&lt;p&gt;②吸引了全球數千名開發者的參與，使Linux 成為最受歡迎的開源作業系統之一。&lt;/p&gt;
&lt;p&gt;③建立Git 分散式版本控制系統，並在Linux 核心開發中開始使用它。&lt;/p&gt;
&lt;p&gt;④為了解決Linux 核心開發過程中遇到的問題，例如處理大規模程式碼庫和多人協作等，而設計了Git。&lt;/p&gt;
&lt;h2&gt;C. git 解決內容管理問題&lt;/h2&gt;
&lt;p&gt;1.對於一般的專業人士，無論是軟體開發者、寫作者、設計師或其他領域的從業者，Git 都可以作為一個強大的工具來解決內容管理問題&lt;/p&gt;
&lt;p&gt;①版本控制: 使用Git 可以輕鬆追蹤檔案的變更歷史，從而方便回溯到先前的版本。&lt;/p&gt;
&lt;p&gt;②協作合作: 多人協作時，Git 提供了分支和合併的功能，可以讓團隊成員在不干擾彼此的情況下並行工作。&lt;/p&gt;
&lt;p&gt;③備份與同步: 使用Git 可以輕鬆地將檔案備份到遠端倉庫，並確保資料的安全性和可靠性。&lt;/p&gt;
&lt;p&gt;④程式碼審查與回饋: Git 提供了程式碼審查工具，團隊成員可以透過提交程式碼並要求審查來進行程式碼品質控制&lt;/p&gt;
&lt;p&gt;⑤專案管理: Git 倉庫可以與專案管理工具（如Jira、Trello等）集成，幫助團隊追蹤任務、問題和進度，提高專案管 理的效率和透明度。&lt;/p&gt;</content><category term="w6"></category><category term="網誌編寫"></category></entry><entry><title>小遊戲設計</title><link href="./%E5%B0%8F%E9%81%8A%E6%88%B2%E8%A8%AD%E8%A8%88.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:29:53+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./小遊戲設計.html</id><summary type="html">&lt;h2&gt;小遊戲設計&lt;/h2&gt;
&lt;p&gt;1.先利用Chat GPT問程式&lt;/p&gt;
&lt;p&gt;2程式碼如下:
import random&lt;/p&gt;
&lt;p&gt;def get_user_choice():
    choices = ['剪刀', '石頭', '布']
    while True:
        user_choice = input("請輸入你的選擇（剪刀、石頭、布）：")
        if user_choice in choices:
            return user_choice
        else:
            print("無效的選 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;小遊戲設計&lt;/h2&gt;
&lt;p&gt;1.先利用Chat GPT問程式&lt;/p&gt;
&lt;p&gt;2程式碼如下:
import random&lt;/p&gt;
&lt;p&gt;def get_user_choice():
    choices = ['剪刀', '石頭', '布']
    while True:
        user_choice = input("請輸入你的選擇（剪刀、石頭、布）：")
        if user_choice in choices:
            return user_choice
        else:
            print("無效的選擇，請重新輸入。")&lt;/p&gt;
&lt;p&gt;def get_computer_choice():
    choices = ['剪刀', '石頭', '布']
    return random.choice(choices)&lt;/p&gt;
&lt;p&gt;def determine_winner(user_choice, computer_choice):
    if user_choice == computer_choice:
        return "平手！"
    elif (user_choice == '剪刀' and computer_choice == '布') or \
         (user_choice == '石頭' and computer_choice == '剪刀') or \
         (user_choice == '布' and computer_choice == '石頭'):
        return "你贏了！"
    else:
        return "你輸了！"&lt;/p&gt;
&lt;p&gt;def play_game():
    user_choice = get_user_choice()
    computer_choice = get_computer_choice()
    print(f"你的選擇：{user_choice}")
    print(f"電腦的選擇：{computer_choice}")
    result = determine_winner(user_choice, computer_choice)
    print(result)&lt;/p&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    while True:
        play_game()
        play_again = input("你想再玩一次嗎？（輸入 'y' 繼續，其他鍵退出）：")
        if play_again.lower() != 'y':
            break
    print("遊戲結束！感謝你的參與。")&lt;/p&gt;
&lt;p&gt;3.下載VS CODE&lt;/p&gt;
&lt;p&gt;4.建立一個新的資料夾到桌面上&lt;/p&gt;
&lt;p&gt;5.再建立一個名稱叫 "rock_paper_scissors.py"的程式庫讓程式可以正常運作&lt;/p&gt;
&lt;p&gt;6.以下為影片連結
https://youtu.be/1YqDXv6QgGs&lt;/p&gt;
&lt;p&gt;7.解釋程式&lt;/p&gt;
&lt;p&gt;A:&lt;/p&gt;
&lt;p&gt;get_user_choice(): 獲取玩家的選擇並確保輸入有效。
get_computer_choice(): 隨機生成電腦的選擇。
determine_winner(): 根據玩家和電腦的選擇決定勝負。
play_game(): 執行一輪遊戲，並顯示結果。
main 程序循環：允許玩家多次進行遊戲，直到選擇退出。
B:
       按下 F5 或選擇 Run -&amp;gt; Start Debugging(建立終端機) 來執行程式。&lt;/p&gt;</content><category term="小遊戲設計"></category><category term="網誌編寫"></category></entry><entry><title>期中課程整理</title><link href="./%E6%9C%9F%E4%B8%AD%E8%AA%B2%E7%A8%8B%E6%95%B4%E7%90%86.html" rel="alternate"></link><published>2024-02-18T11:00:00+08:00</published><updated>2024-06-15T07:22:42+08:00</updated><author><name>kmol</name></author><id>tag:None,2024-02-18:./期中課程整理.html</id><summary type="html">&lt;p&gt;## 大綱
1.網際內容管理課程的英文名稱為 Web-based Content Management&lt;/p&gt;
&lt;p&gt;2.網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;## 大綱
1.網際內容管理課程的英文名稱為 Web-based Content Management&lt;/p&gt;
&lt;p&gt;2.網際內容管理課程將網頁內容管理系統與網頁資料放在同一個倉儲中, 且讓使用者寄存在 Github 中, 只要能夠執行 Python 的雲端或近端環境都能開啟網頁編輯程式進行改版。&lt;/p&gt;
&lt;h2&gt;網頁上的 IDE&lt;/h2&gt;
&lt;p&gt;1.網頁上的 IDE（集成開發環境）是一種在網頁瀏覽器中運行的開發工具，通常用於網頁開發或輕量級的程式開發。這些工具提供了一個集成的開發環境，包括編輯器、語法高亮顯示、自動完成、調試器和版本控制等功能。&lt;/p&gt;
&lt;p&gt;2.Replit、Codespaces 和 Gitpod 都是強大的在線開發環境，可以用來開發各種類型的程式，包括但不限於網頁、應用軟件、遊戲、數據科學和機器學習等。&lt;/p&gt;
&lt;h2&gt;AI 工具&lt;/h2&gt;
&lt;p&gt;1.AI 工具通過其強大的數據分析和模式識別能力，為我們提供了許多解決問題的新途徑，並在各個領域產生了深遠的影響。&lt;/p&gt;
&lt;p&gt;自然語言處理：NLP 技術使得我們可以從大量的文本數據中提取信息、理解語義、進行情感分析等。這有助於搜索引擎優化、情感分析、智能客服等方面的應用。&lt;/p&gt;
&lt;p&gt;計算機視覺：CV 技術使得計算機能夠理解和解讀圖像和視頻。這有助於圖像識別、人臉識別、自動駕駛、醫學影像分析等應用。&lt;/p&gt;
&lt;p&gt;機器學習和深度學習：機器學習和深度學習技術被廣泛應用於預測分析、推薦系統、金融風險管理、健康監測、自然資源管理等方面。&lt;/p&gt;
&lt;p&gt;自動化和智能助手：AI 工具使得我們可以開發自動化系統和智能助手，幫助我們自動處理瑣碎任務、提高工作效率，例如智能家居系統、智能辦公軟件等。&lt;/p&gt;
&lt;p&gt;健康醫療：AI 工具在醫學領域中的應用包括疾病診斷、藥物研發、醫學影像分析、個性化治療等，有助於提高醫療服務的質量和效率。&lt;/p&gt;
&lt;p&gt;2.總的來說，AI 工具通過其強大的數據分析和模式識別能力，為我們提供了許多解決問題的新途徑，並在各個領域產生了深遠的影響。&lt;/p&gt;
&lt;h2&gt;實作練習問題&lt;/h2&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;打開Excel 2016。
依序點選「資料」 -&amp;gt; 「自文字/CSV」。
在彈出的檔案選擇對話框中，選擇你的.csv 檔案（例如: 5j_wcm2024_midterm.csv）。
Excel 會自動啟動「文字匯入精靈」。在嚮導中：
在第一個視窗中，確保「檔案起始行」是1，然後點選「下一步」。
在第二個視窗中，將檔案原始資料類型設為“分隔符號”，然後點選“下一步”。
在第三個視窗中，選擇合適的分隔符號（通常是逗號或製表符），然後點擊「下一步」。
在最後一個視窗中，點擊“高級”按鈕。
在彈出的“高級文字導入設定”對話框中，將“文件原始編碼”改為“65001: Unicode (UTF-8)”，然後點擊“確定”。
點選「完成」按鈕，Excel 會正確地匯入並顯示CSV 檔案內容。
7.wcm2024 課程中曾經提到可以利用舊的可攜 Python 程式環境建立新的 Python 可攜程式環境, 但該如何進行?&lt;/p&gt;
&lt;p&gt;要建立新的可攜式 Python 程式環境，你可以遵循這些步驟：&lt;/p&gt;
&lt;p&gt;1.下載新的可攜式 Python 發行版，例如 Anaconda 或 Miniconda。
2. 解壓縮下載的檔案到你想要的目錄。
3. 如果你想要將舊的程式庫和設定複製到新的環境，你可以執行以下步驟：
- 在舊的環境中使用 pip freeze &amp;gt; requirements.txt 命令將所有安裝的套件列在一個文件中。
- 將該文件複製到新的環境。
- 在新的環境中使用 pip install -r requirements.txt 命令安裝所有套件。
4. 如果你想要完全複製舊的環境，包括 Python 版本和所有套件，你可以嘗試將整個舊的程式目錄複製到新的位置。&lt;/p&gt;
&lt;p&gt;這些步驟應該能幫助你建立一個新的可攜式 Python 程式環境。&lt;/p&gt;
&lt;p&gt;8.建立一個掃地機器人的工作模擬系統需要以下步驟：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;了解 Brython：Brython 是一個將 Python 代碼直譯成 JavaScript 的工具，可以讓你在網頁中運行 Python 代碼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編寫掃地機器人的模擬程式：使用 Python 編寫模擬掃地機器人的程式碼，包括控制機器人移動、偵測障礙物、清潔地板等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立網頁：在 HTML 中嵌入 Brython，以便在網頁中執行 Python 代碼。你需要將 Brython 的相關檔案引入到你的 HTML 文件中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;將 Python 代碼嵌入到網頁中：在網頁中添加你編寫的 Python 代碼，並使用 Brython 來執行這些代碼。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;設計控制介面：在網頁中添加控制掃地機器人的介面，例如按鈕來啟動/停止機器人、調整機器人的速度等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="期中課程整理"></category><category term="網誌編寫"></category></entry></feed>